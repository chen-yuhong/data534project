import unittest
import sys
sys.path.insert(0, sys.path[0][:-4])
from apra import APRA

class TestAPRA(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        print("")
    
    def setUp(self):
        self.app = APRA()
        
    def test_getTitle(self):
        self.assertEqual(self.app.Master.title(),'APRA (Amazon Product Review Analysis)')
        self.assertNotEqual(self.app.Master.title(),'Null')
        self.assertNotEqual(self.app.Master.title(),'Title')
        self.assertNotEqual(self.app.Master.title(),'title')
        self.assertNotEqual(self.app.Master.title(),'null')
        self.assertNotEqual(self.app.Master.title(),'APRA')
        self.assertNotEqual(self.app.Master.title(),'data534')
        self.assertNotEqual(self.app.Master.title(),'project')
        self.assertNotEqual(self.app.Master.title(),'534')
        self.assertNotEqual(self.app.Master.title(),'data')
        self.assertNotEqual(self.app.Master.title(),'default')
        self.assertTrue(self.app.Master.title()=='APRA (Amazon Product Review Analysis)')
        self.assertFalse(self.app.Master.title()=='Null')

    def test_clean_text(self):
        self.assertEqual(self.app.clean_text(['Hi!']),['Hi '])
        self.assertEqual(self.app.clean_text(['Bye@']),['Bye '])
        self.assertEqual(self.app.clean_text(['APRA,']),['APRA '])
        self.assertEqual(self.app.clean_text(['RUN?']),['RUN '])
        self.assertEqual(self.app.clean_text([',APRA,']),[' APRA '])
        self.assertNotEqual(self.app.clean_text(['Hi!']),'Hi!')
        self.assertNotEqual(self.app.clean_text(['Bye@']),['Bye@'])
        self.assertNotEqual(self.app.clean_text(['APRA,']),['APRA,'])
        self.assertNotEqual(self.app.clean_text(['RUN?']),['RUN?'])
        self.assertNotEqual(self.app.clean_text([',APRA,']),['APRA '])
        self.assertNotEqual(self.app.clean_text(['how?']),'how!')
        self.assertNotEqual(self.app.clean_text(['are@']),['are@'])
        self.assertNotEqual(self.app.clean_text(['you,']),['you,'])
        self.assertNotEqual(self.app.clean_text(['Why?']),['Why?'])
        self.assertNotEqual(self.app.clean_text([',What,']),['What '])
        self.assertNotEqual(self.app.clean_text(['can,']),['can,'])
        self.assertNotEqual(self.app.clean_text(['amazon?']),['amazon?'])
        self.assertNotEqual(self.app.clean_text([',sell,']),['sell '])
        self.assertNotEqual(self.app.clean_text(['bad?']),'bad!')
        self.assertNotEqual(self.app.clean_text(['good@']),['good@'])
        self.assertNotEqual(self.app.clean_text(['not,']),['no,'])
        self.assertNotEqual(self.app.clean_text(['like?']),['dislike?'])
        self.assertNotEqual(self.app.clean_text([',hey,']),['What '])

    def test_menu_bar(self):
        self.assertFalse('amazon.cn' in self.app.options_list)
        self.assertFalse('amazon.de' in self.app.options_list)
        self.assertFalse('amazon.it' in self.app.options_list)
        self.assertFalse('amazon.fr' in self.app.options_list)
        self.assertFalse('amazon.jp' in self.app.options_list)
        self.assertFalse('google' in self.app.options_list)
        self.assertFalse('baidu' in self.app.options_list)
        self.assertFalse('bing' in self.app.options_list)
        self.assertFalse('naver' in self.app.options_list)
        self.assertFalse('taobao' in self.app.options_list)
        self.assertFalse('jingdong' in self.app.options_list)
        self.assertFalse('pinduoduo' in self.app.options_list)
        self.assertFalse('meituan' in self.app.options_list)
        self.assertTrue('amazon.com' in self.app.options_list)
        self.assertTrue('amazon.ca' in self.app.options_list)
        self.assertTrue('amazon.com.au' in self.app.options_list)
        self.assertTrue('amazon.co.uk' in self.app.options_list)

    def test_clean_content(self):
        self.app.clean_content()
        self.assertEqual(self.app.out1['text'],'')
        self.assertEqual(self.app.out2['text'],'')
        self.assertEqual(self.app.out3['text'],'')
        self.assertNotEqual(self.app.out1['text'],'1')
        self.assertNotEqual(self.app.out2['text'],'2')
        self.assertNotEqual(self.app.out3['text'],'3')
        self.assertNotEqual(self.app.out1['text'],'a')
        self.assertNotEqual(self.app.out2['text'],'b')
        self.assertNotEqual(self.app.out3['text'],'c')
        self.assertNotEqual(self.app.out1['text'],'d')
        self.assertNotEqual(self.app.out2['text'],'e')
        self.assertNotEqual(self.app.out3['text'],'f')
        self.assertNotEqual(self.app.out1['text'],'g')
        self.assertNotEqual(self.app.out2['text'],'h')
        self.assertNotEqual(self.app.out3['text'],'i')
        self.assertNotEqual(self.app.out1['text'],'j')
        self.assertNotEqual(self.app.out2['text'],'k')
        self.assertNotEqual(self.app.out3['text'],'l')
        self.assertNotEqual(self.app.out1['text'],'m')
        self.assertNotEqual(self.app.out2['text'],'n')
        self.assertNotEqual(self.app.out3['text'],'o')
        self.assertNotEqual(self.app.out1['text'],'p')
        self.assertNotEqual(self.app.out2['text'],'q')
        self.assertNotEqual(self.app.out3['text'],'r')
        self.assertNotEqual(self.app.out1['text'],'s')
        self.assertNotEqual(self.app.out2['text'],'t')
        self.assertNotEqual(self.app.out3['text'],'u')
        self.assertNotEqual(self.app.out1['text'],'v')
        self.assertNotEqual(self.app.out2['text'],'w')
        self.assertNotEqual(self.app.out3['text'],'x')
        self.assertNotEqual(self.app.out1['text'],'y')
        self.assertNotEqual(self.app.out2['text'],'z')
        self.assertNotEqual(self.app.out3['text'],'5')

    def test_api_label(self):
        self.assertEqual(self.app.api_label['text'],"API Key:")
        self.assertNotEqual(self.app.api_label['text'],"API")
        self.assertNotEqual(self.app.api_label['text'],"Key:")
        self.assertNotEqual(self.app.api_label['text'],"A")
        self.assertNotEqual(self.app.api_label['text'],"#")
        self.assertNotEqual(self.app.api_label['text'],"S")
        self.assertNotEqual(self.app.api_label['text'],"I")
        self.assertNotEqual(self.app.api_label['text'],"N")
        self.assertNotEqual(self.app.api_label['text'],":")
        self.assertNotEqual(self.app.api_label['text'],"K")
        self.assertNotEqual(self.app.api_label['text'],"E")
        self.assertNotEqual(self.app.api_label['text'],"Y")
        self.assertNotEqual(self.app.api_label['text'],"Key")
        self.assertNotEqual(self.app.api_label['text'],"api")
        self.assertNotEqual(self.app.api_label['text'],"key")

    def test_asin_label(self):
        self.assertEqual(self.app.asin_label['text'],"ASIN #:")
        self.assertNotEqual(self.app.asin_label['text'],"ASIN #")
        self.assertNotEqual(self.app.asin_label['text'],"#:")
        self.assertNotEqual(self.app.asin_label['text'],"A")
        self.assertNotEqual(self.app.asin_label['text'],"#")
        self.assertNotEqual(self.app.asin_label['text'],"S")
        self.assertNotEqual(self.app.asin_label['text'],"I")
        self.assertNotEqual(self.app.asin_label['text'],"N")
        self.assertNotEqual(self.app.asin_label['text'],":")
        self.assertNotEqual(self.app.asin_label['text'],"a")
        self.assertNotEqual(self.app.asin_label['text'],"s")
        self.assertNotEqual(self.app.asin_label['text'],"i")
        self.assertNotEqual(self.app.asin_label['text'],"n")
        self.assertNotEqual(self.app.asin_label['text'],"asin")
        self.assertNotEqual(self.app.asin_label['text'],"ASIN")

    def test_button(self):
        self.assertEqual(self.app.Button['text'],"Submit")
        self.assertTrue(self.app.Button['text']=="Submit")
        self.assertNotEqual(self.app.Button['text'],"Button")
        self.assertNotEqual(self.app.Button['text'],"Click")
        self.assertNotEqual(self.app.Button['text'],"Enter")
        self.assertNotEqual(self.app.Button['text'],"Run")
        self.assertNotEqual(self.app.Button['text'],"A")
        self.assertNotEqual(self.app.Button['text'],"#")
        self.assertNotEqual(self.app.Button['text'],"S")
        self.assertNotEqual(self.app.Button['text'],"I")
        self.assertNotEqual(self.app.Button['text'],"N")
        self.assertNotEqual(self.app.Button['text'],":")
        self.assertNotEqual(self.app.Button['text'],"b")
        self.assertNotEqual(self.app.Button['text'],"u")
        self.assertNotEqual(self.app.Button['text'],"t")
        self.assertNotEqual(self.app.Button['text'],"n")
        self.assertNotEqual(self.app.Button['text'],"o")
        self.assertNotEqual(self.app.Button['text'],"s")
        self.assertNotEqual(self.app.Button['text'],"m")
        self.assertNotEqual(self.app.Button['text'],"submit")
        self.assertNotEqual(self.app.Button['text'],"enter")
        self.assertNotEqual(self.app.Button['text'],"click")
        self.assertNotEqual(self.app.Button['text'],"button")
        self.assertNotEqual(self.app.Button['text'],"run")
        self.assertNotEqual(self.app.Button['text'],"-->")
        self.assertNotEqual(self.app.Button['text'],"<--")

    def test_labels(self):
        self.assertEqual(len(self.app.labels),10)
        self.assertTrue(len(self.app.labels)==10)
        self.assertNotEqual(len(self.app.labels),1)
        self.assertNotEqual(len(self.app.labels),2)
        self.assertNotEqual(len(self.app.labels),3)
        self.assertNotEqual(len(self.app.labels),4)
        self.assertNotEqual(len(self.app.labels),5)
        self.assertNotEqual(len(self.app.labels),6)
        self.assertNotEqual(len(self.app.labels),7)
        self.assertNotEqual(len(self.app.labels),8)
        self.assertNotEqual(len(self.app.labels),9)
        self.assertNotEqual(len(self.app.labels),11)
        self.assertNotEqual(len(self.app.labels),1011)
        self.assertNotEqual(len(self.app.labels),100)
        self.assertNotEqual(len(self.app.labels),110)
        self.assertNotEqual(len(self.app.labels),111)
        self.assertNotEqual(len(self.app.labels),101)
        self.assertNotEqual(len(self.app.labels),1001)
        self.assertNotEqual(len(self.app.labels),1111)

    def test_warn(self):
        self.assertEqual(self.app.warn['text'],'')
        self.assertTrue(self.app.warn['text']=='')
        self.assertNotEqual(self.app.warn['text'],'API key is not valid')
        self.assertNotEqual(self.app.warn['text'],'Sorry, ASIN is not valid')
        self.assertNotEqual(self.app.warn['text'],'Sorry, domain is not valid')
        self.assertNotEqual(self.app.warn['text'],'No bad review for this product')
        self.assertNotEqual(self.app.warn['text'],"Button")
        self.assertNotEqual(self.app.warn['text'],"Click")
        self.assertNotEqual(self.app.warn['text'],"Enter")
        self.assertNotEqual(self.app.warn['text'],"Run")
        self.assertNotEqual(self.app.warn['text'],"A")
        self.assertNotEqual(self.app.warn['text'],"#")
        self.assertNotEqual(self.app.warn['text'],"S")
        self.assertNotEqual(self.app.warn['text'],"I")
        self.assertNotEqual(self.app.warn['text'],"N")
        self.assertNotEqual(self.app.warn['text'],":")
        8
    def tearDown(self):
        print("")
        
    @classmethod
    def tearDownClass(cls):
        print("")
         
    unittest.main(argv=[''], verbosity=2, exit=False)  
